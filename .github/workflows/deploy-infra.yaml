---
name: Deploy Infrastructure
run-name: Deploy Workflow

on:
  push:
    branches:
      - 'fix/*'
      - 'feat/*'
      - 'feature/*'
    paths:
      - '*.tf'
      - '*.vars'
      - 'templates/*'
      - 'modules/*/*.tf'

  pull_request:
    branches:
      - 'feature/*'
      - 'feat/*'
      - 'fix/*'
    paths:
      - '*.tf'
      - '*.vars'
      - 'templates/*'
      - 'modules/*/*.tf'
#      types: [opened, reopened]

jobs:
  Deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Setup Environment variable
        run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: apt install
        run: |
          sudo apt update 2>&1> /dev/null
          test -e /usr/bin/j2       ||  sudo apt install -y j2cli 2>&1> /dev/null    && echo "✨ j2-> Istalled sussesfuly"        || echo "💥 j2-> Installed faulere"
          test -e /usr/bin/envsubst ||  sudo apt install -y gettext 2>&1> /dev/null  && echo "✨ envsubst-> Istalled sussesfuly"  || echo "💥 envsubst-> Installed faulere"

      - name: Create Terraform Backend
        run: |
          export AWS_S3_BACKEND=${{ secrets.AWS_S3_BACKEND }}

          ## Create Bucket if not exist
          if aws s3 ls "s3://${{ secrets.AWS_S3_BACKEND }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "⚠️ Bucket not found, It will be created"

            mkdir -p backend
            j2 -e AWS_S3_BACKEND templates/backend.bootstrap.j2 -o backend/main.tf
            terraform -chdir=backend workspace new bootstrap || true
            terraform -chdir=backend init
            terraform -chdir=backend apply -auto-approve
            echo "✅ Terraform backend created successfully."

            aws s3 cp backend/terraform.tfstate.d/bootstrap/terraform.tfstate s3://${{ secrets.AWS_S3_BACKEND }}/bootstrap/ 
            echo "✨ Terraform backed up successfully."
          else
            echo "♻️ S3 bucket already exists."
          fi

          ## Create remote stats for environment if not exist
          if aws s3 ls "s3://${{ secrets.AWS_S3_BACKEND }}/env:/${{ env.ENVIRONMENT }}/${{ vars.AWS_BACKEND_KEY_NETWORKING }}" ; then
            echo "♻ S3 terraform state for ${{ env.ENVIRONMENT }} already exists."
          else
            j2 -e AWS_S3_BACKEND templates/backend.j2 -o backend.conf && echo "✨ backend.conf"
            terraform init -backend-config=backend.conf -get=false
            terraform workspace new ${{ env.ENVIRONMENT }} && echo "✨ ${{ env.ENVIRONMENT }} workspace "
            rm -fr .terraform* 2>&1 >/dev/null
          fi

      - name: Terraform init
        run: |
          export AWS_S3_BACKEND=${{ secrets.AWS_S3_BACKEND }}
          export AWS_BACKEND_KEY_NETWORKING=${{ vars.AWS_BACKEND_KEY_NETWORKING }}

          j2 -e AWS_S3_BACKEND -e AWS_BACKEND_KEY_NETWORKING templates/backend.j2 -o backend.conf && echo "✨ backend.conf"
          terraform init -backend-config=backend.conf
          terraform workspace select ${{ env.ENVIRONMENT }}
          echo "terraform workspace list" && terraform workspace list
